buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://m2.dv8tion.net/releases' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://repo.maven.apache.org/maven2/' }
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "java"
    id "maven-publish"
}

ext {
// Change these:
    applicationName = 'Melody'
    applicationVersion = '1.0'
    applicationVersionDetail = 'pre02'
}

// Do not change these:
group = 'com.lopl.melody'
version = applicationVersion + applicationVersionDetail
description = name
java.sourceCompatibility = JavaVersion.VERSION_15

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://m2.dv8tion.net/releases' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.maven.apache.org/maven2/' }
}

dependencies {
    implementation 'net.dv8tion:JDA:4.3.0_346'
    implementation 'com.jagrosh:jda-utilities:3.0.5'
    implementation 'com.sedmelluq:lavaplayer:1.3.75'
    implementation 'com.zaxxer:HikariCP:4.0.3'
    implementation 'org.xerial:sqlite-jdbc:3.14.2'
    implementation 'se.michaelthelin.spotify:spotify-web-api-java:7.0.0'
    implementation 'ch.qos.logback:logback-classic:1.2.10'
    implementation 'ch.qos.logback:logback-core:1.2.10'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.mockito:mockito-inline:4.3.1'
    implementation 'com.google.code.gson:gson:2.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.3.1'
    implementation fileTree(include: ['*.jar'], dir: 'src/main/resources/libraries')
}

// Shadowing Test Sources and Dependencies
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

// create Melody jar
task melodyJar(type: ShadowJar) {
    destinationDirectory.set(file("$projectDir/builds"))
    manifest {
        attributes(
                'Class-Path': sourceSets.main.runtimeClasspath,
                "Main-Class": "com.lopl.melody.Melody",
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
}

// create upsertCommandsGlobal jar
task melodyCommandsGlobalJar(type: ShadowJar) {
    destinationDirectory.set(file("$projectDir/builds"))
    manifest {
        attributes(
                'Class-Path': sourceSets.main.runtimeClasspath,
                "Main-Class": "com.lopl.melody.slash.SlashCommandUpsertGlobal",
                'Implementation-Title': project.name + "GlobalCommands",
                'Implementation-Version': project.version
        )
    }
    archiveBaseName.set(applicationName + "GlobalCommands")
}

// create upsertCommandsLocal jar
task melodyCommandsLocalJar(type: ShadowJar) {
    destinationDirectory.set(file("$projectDir/builds"))
    manifest {
        attributes(
                'Class-Path': sourceSets.main.runtimeClasspath,
                "Main-Class": "com.lopl.melody.slash.SlashCommandUpsertLocal",
                'Implementation-Title': project.name + "LocalCommands",
                'Implementation-Version': project.version
        )
    }
    archiveBaseName.set(applicationName + "LocalCommands")
}

shadowJar {
    archiveBaseName.set(applicationName)
    archiveVersion.set(applicationVersion)
    archiveClassifier.set(applicationVersionDetail)
    destinationDirectory.set(file("$projectDir/builds"))
}

// If you want to run from the command line gradle -q execute
task execute(type: JavaExec) {
    group = "Execution"
    description = "Run the main class with JavaExecTask"
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.lopl.melody.Melody'
}

// If you want to upsert Melody's commands globally (takes up to 24 hrs)
task upsertGlobal(type: JavaExec) {
    group = "Execution"
    description = "Run the upsert global class with JavaExecTask"
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.lopl.melody.slash.SlashCommandUpsertGlobal'
}

// If you want to upsert Melody's commands only for all active guilds
task upsertLocal(type: JavaExec) {
    group = "Execution"
    description = "Run the upsert local class with JavaExecTask"
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.lopl.melody.slash.SlashCommandUpsertLocal'
}
