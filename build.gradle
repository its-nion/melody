import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://m2.dv8tion.net/releases' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://repo.maven.apache.org/maven2/' }
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "java"
    id 'application'
    id "maven-publish"
}

ext {
// Change these:
    applicationName = 'Melody'
    applicationVersion = '1.0'
    applicationVersionDetail = 'pre03'
}

// Do not change these:
group = 'com.lopl.melody'
version = applicationVersion + applicationVersionDetail
description = name
mainClassName = "com.lopl.melody.gui.MelodyGUI"
java.sourceCompatibility = JavaVersion.VERSION_15

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://m2.dv8tion.net/releases' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.maven.apache.org/maven2/' }
}

configurations {
    provided
    compile.extendsFrom(provided)
}

dependencies {
    implementation 'net.dv8tion:JDA:4.3.0_346'
    implementation 'com.jagrosh:jda-utilities:3.0.5'
    implementation 'com.sedmelluq:lavaplayer:1.3.75'
    implementation 'com.zaxxer:HikariCP:4.0.3'
    implementation 'org.xerial:sqlite-jdbc:3.14.2'
    implementation 'se.michaelthelin.spotify:spotify-web-api-java:7.0.0'
    implementation 'ch.qos.logback:logback-classic:1.2.10'
    implementation 'ch.qos.logback:logback-core:1.2.10'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.mockito:mockito-inline:4.3.1'
    implementation 'com.google.code.gson:gson:2.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.3.1'
    implementation fileTree(include: ['*.jar'], dir: 'src/main/resources/libraries')
}

application {
    // Define the main class for the application.
    mainClassName = "com.lopl.melody.gui.MelodyGUI"
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}


jar {
    exclude 'META-INF/*.DSA'
    manifest {
        attributes "Main-Class": mainClassName
    }
    zip64 = true
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}


// create Melody jar
task melodyJar(type: ShadowJar) {
    destinationDirectory.set(file("$projectDir/builds"))
    manifest {
        attributes(
                'Class-Path': sourceSets.main.runtimeClasspath,
                'Main-Class': mainClassName,
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
}


shadowJar {
    archiveBaseName.set(applicationName)
    archiveVersion.set(applicationVersion)
    archiveClassifier.set(applicationVersionDetail)
    destinationDirectory.set(file("$projectDir/builds"))
    zip64 = true
}

// If you want to run from the command line gradle -q execute
task execute(type: JavaExec) {
    group = "Execution"
    description = "Run the main class with JavaExecTask"
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.lopl.melody.Melody'
}


